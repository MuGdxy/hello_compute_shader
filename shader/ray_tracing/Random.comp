#version 450
#extension GL_GOOGLE_include_directive: enable
#extension GL_EXT_debug_printf : enable
#include "Random.comph"
uint stateOrigin;

uint xor_shift_rand()
{
    state ^= (state << 13);
    state ^= (state >> 17);
    state ^= (state << 5);
    return state;
}

void Seed(uvec2 screenCoord, uvec2 screenSize)
{
	state = uint(screenCoord.x + (screenCoord.y + 1) * screenSize.x + screenSize.x);
    stateOrigin = state;
}

float Rand() 
{
    if(state == 0) state = stateOrigin;
    return float(xor_shift_rand()) * (1.0 / 4294967296.0); 
}

float Rand(float min_, float max_) { return min_ + Rand() * (max_ - min_); }

vec2 RandVec2() { return vec2(Rand(),Rand()); }

vec2 RandVec2(float min_, float max_) { return vec2(Rand(min_,max_),Rand(min_, max_)); }

vec3 RandVec3() { return vec3(RandVec2(),Rand()); }

vec3 RandVec3(float min_, float max_) { return vec3(RandVec2(min_,max_),Rand(min_, max_)); }

vec3 RandUnitBall()
{
    for(int i = 0; i < 10; ++i)
    {
        vec3 p = RandVec3(-1,1); 
        if (dot(p,p) >= 1.0) continue;
        return p;
    }
	return vec3(0,0.999,0);
}

vec3 RandUnitVector() {
    return normalize(RandUnitBall());
}

vec2 RandDisk()
{
     for(int i = 0; i < 10; ++i) 
    {
        vec2 p = RandVec2(-1,1); 
        if (dot(p,p) >= 1.0) continue;
        return p;
    }
	return vec2(0,0.999);
}

vec3 RandSemiUnitBall(vec3 normal)
{
    vec3 unitBall = RandUnitBall();
    if (dot(unitBall, normal) > 0.0) return unitBall;
    else return -unitBall;
}